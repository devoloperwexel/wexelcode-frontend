# Deploy to Azure Kubernetes Service [DEV]
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: "4716bf1e-17e4-4499-9d8c-f84534e2cfd6"
  azureSubscriptionKeyVaultConnection: "cecdb484-e6e0-4862-9ee7-f90d1c44536e"
  azureSubscriptionWebAppConnection: '632124d4-3851-4858-a190-db747c72d4c3'
  acrName: $(ACR_NAME)
  appName: $(WEB_APP_NAME)
  patientAppName: $(PATIENT_WEB_APP_NAME)
  physioAppName: $(PHYSIO_WEB_APP_NAME)
  imageRepositoryPatient: $(IMAGE_REPOSITORY_PATIENT)
  imageRepositoryPhysio: $(IMAGE_REPOSITORY_PHYSIO)
  patientDockerfilePath: '**/apps/patient-portal/Dockerfile'
  physioDockerfilePath: '**/apps/doctor-portal/Dockerfile'
  tag: '$(Build.BuildId)'

stages:

- stage: Build
  displayName: "Build & Push Docker Images 🛠️"
  jobs:
  - job: build_and_push
    pool:
      name: $(AGENT_POOL)
    displayName: "Build & Push Job"
    steps:
    - checkout: self
      fetchDepth: 0
    # Install Node
    - task: UseNode@1
      inputs:
        version: 22.14.0

    # Install pnpm and dependencies in one step
    - script: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
      displayName: "Install pnpm and project dependencies"

    - task: AzureKeyVault@2
      displayName: Fetch secrets from Azure Key Vault
      inputs:
        azureSubscription: $(azureSubscriptionKeyVaultConnection)
        KeyVaultName: $(KEYVAULT_NAME)
        SecretsFilter: '*'
        RunAsPreJob: true
    - script: |
        # ===== Patient Portal =====
        echo "NEXT_PUBLIC_BASE_URL=$(dev-web-base-url)" >> apps/patient-portal/.env
        echo "AUTH_KEYCLOAK_ISSUER=$(dev-web-auth-issuer-patient)" >> apps/patient-portal/.env
        echo "AUTH_KEYCLOAK_ID=$(dev-web-keycloak-client-id-patient)" >> apps/patient-portal/.env
        echo "AUTH_KEYCLOAK_SECRET=$(dev-web-keycloak-secret-patient)" >> apps/patient-portal/.env
        echo "AUTH_SECRET=$(dev-web-nextauth-secret-patient)" >> apps/patient-portal/.env
        echo "NEXTAUTH_URL=$(dev-web-nextauth-url-patient)" >> apps/patient-portal/.env
        echo "STRIPE_CLIENT_SECRET=$(dev-web-stripe-secret)" >> apps/patient-portal/.env
        echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$(dev-web-stripe-publish-key)" >> apps/patient-portal/.env

        # ===== Doctor / Physio Portal =====
        echo "NEXT_PUBLIC_BASE_URL=$(dev-web-base-url)" >> apps/doctor-portal/.env
        echo "AUTH_KEYCLOAK_ISSUER=$(dev-web-auth-issuer-physio)" >> apps/doctor-portal/.env
        echo "AUTH_KEYCLOAK_ID=$(dev-web-keycloak-client-id-physio)" >> apps/doctor-portal/.env
        echo "AUTH_KEYCLOAK_SECRET=$(dev-web-keycloak-secret-physio)" >> apps/doctor-portal/.env
        echo "AUTH_SECRET=$(dev-web-nextauth-secret-physio)" >> apps/doctor-portal/.env
        echo "NEXTAUTH_URL=$(dev-web-nextauth-url-physio)" >> apps/doctor-portal/.env

        echo "✅ .env files generated successfully"
      displayName: "Generate .env File"

    # Set SHAs and build affected projects
    - script: |
        export NX_BASE=origin/main
        echo "Base SHA: $NX_BASE"

        # Set NX_HEAD to current commit
        export NX_HEAD=$(Build.SourceVersion)
        echo "HEAD SHA: $NX_HEAD"

        npx nx affected -t build --verbose

        APPS=$(npx nx show projects --affected | tr '\n' ' ')
        echo "##vso[task.setvariable variable=affected_apps]$APPS"
        echo "Affected projects: $APPS"
      displayName: "Build Affected Projects"

    # Push Patient Portal (conditionally)
    - task: Docker@2
      displayName: "Push to ACR: Patient Portal"
      condition: contains(variables['affected_apps'], 'patient-portal')
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryPatient)
        dockerfile: $(patientDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Push Physio Portal (conditionally)
    - task: Docker@2
      displayName: "Push to ACR: Physio Portal"
      condition: contains(variables['affected_apps'], 'doctor-portal')
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryPhysio)
        dockerfile: $(physioDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: DeployPatient
  displayName: Deploy Patient Portal [DEV] 🚀
  dependsOn: Build
  jobs:
  - job: DeployContainer
    displayName: Deploy Container
    pool:
      name: $(AGENT_POOL)
    environment: 'dev-patient-frontend-web-app'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubscriptionWebAppConnection)
              appName: $(patientAppName)
              containers: |
                $(acrName).azurecr.io/$(imageRepositoryPatient):$(tag)
              configurationStrings: '-DOCKER_CUSTOM_IMAGE_NAME=$(acrName).azurecr.io/$(imageRepositoryPatient):$(tag)'

- stage: DeployPhysio
  displayName: Deploy Physio Portal [QA] 🚀
  dependsOn: Build
  jobs:
  - job: DeployContainer
    displayName: Deploy Container
    pool:
      name: $(AGENT_POOL)
    environment: 'qa-physio-frontend-web-app'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubscriptionWebAppConnection)
              appName: $(physioAppName)
              containers: |
                $(acrName).azurecr.io/$(imageRepositoryPatient):$(tag)
              configurationStrings: '-DOCKER_CUSTOM_IMAGE_NAME=$(acrName).azurecr.io/$(imageRepositoryPhysio):$(tag)'
