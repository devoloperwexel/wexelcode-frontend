# Deploy to Azure Kubernetes Service [DEV]
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: "4716bf1e-17e4-4499-9d8c-f84534e2cfd6"
  imageRepositoryPatient: $(IMAGE_REPOSITORY_PATIENT)
  imageRepositoryPhysio: $(IMAGE_REPOSITORY_PHYSIO)
  patientDockerfilePath: '**/apps/patient-portal/Dockerfile'
  physioDockerfilePath: '**/apps/doctor-portal/Dockerfile'
  tag: '$(Build.BuildId)'

stages:

- stage: Build
  displayName: "Build & Push Docker Images üõ†Ô∏è"
  jobs:
  - job: build_and_push
    pool:
      name: $(AGENT_POOL)
    displayName: "Build & Push Job"
    steps:
    - checkout: self
      fetchDepth: 0
    # Install Node
    - task: UseNode@1
      inputs:
        version: 22.14.0

    # Install pnpm and dependencies in one step
    - script: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
      displayName: "Install pnpm and project dependencies"

    # Set SHAs and build affected projects in one step
    - script: |
        git fetch origin dev
        echo "##[group]Determine Base SHA"
        if [ -n "$SYSTEM_PULLREQUEST_SOURCEBRANCH" ]; then
          # If this is a PR
          export BASE_SHA=$(git merge-base origin/$(System.PullRequest.TargetBranch) HEAD)
        else
          # For normal branch build, compare with dev
          export BASE_SHA=$(git merge-base origin/dev HEAD)
        fi
        echo "Base SHA: $BASE_SHA"
        echo "##vso[task.setvariable variable=BASE_SHA]$BASE_SHA"
        echo "##[endgroup]"

        # Set HEAD_SHA to current commit
        export HEAD_SHA=$(Build.SourceVersion)
        echo "HEAD SHA: $HEAD_SHA"

        npx nx affected -t build --base=origin/dev --head=$HEAD_SHA --verbose
      displayName: "Build Affected Projects"

    # Get affected projects and set as pipeline variable
    - script: |
        export HEAD_SHA=$(Build.SourceVersion)
        APPS=$(npx nx show projects --affected --base=origin/dev --head=$HEAD_SHA | tr '\n' ' ')
        echo "##vso[task.setvariable variable=affected_apps]$APPS"
        echo "Affected projects: $APPS"
      displayName: "Get affected projects"

    # Build & Push Patient Portal (conditionally)
    - task: Docker@2
      displayName: "Build & Push Patient Portal"
      condition: contains(variables['affected_apps'], 'patient-portal')
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryPatient)
        dockerfile: $(patientDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Build & Push Physio Portal (conditionally)
    - task: Docker@2
      displayName: "Build & Push Physio Portal"
      condition: contains(variables['affected_apps'], 'doctor-portal')
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryPhysio)
        dockerfile: $(physioDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
