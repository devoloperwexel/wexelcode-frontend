name: CI

on:
  push:
    branches:
    - dev
    - feature/ci-cd
  pull_request:


permissions:
  actions: read
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: "Build & Push Docker Images 🛠️"
    outputs:
      affected_apps: ${{ steps.affected.outputs.apps }}
      patient_image_tag: ${{ steps.image.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache node_modules
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    - run: npm install -g pnpm
    - run: pnpm install --frozen-lockfile

    # Nx Affected logic
    - name: Sets the base and head SHAs for the nx affected commands in CI
      uses: nrwl/nx-set-shas@v4

    - name: Build Affected Projects
      run: npx nx affected -t build --verbose

    - name: Get Affected Projects
      id: affected
      run: |
        APPS=$(npx nx show projects --affected | tr '\n' ' ')
        echo "apps=$APPS" >> $GITHUB_OUTPUT
        echo "Affected projects: $APPS"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      if: contains(steps.affected.outputs.apps, 'patient-portal') || contains(steps.affected.outputs.apps, 'physio-portal')
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Patient Portal Docker Image
      if: contains(steps.affected.outputs.apps, 'patient-portal')
      id: patient-image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        cd apps/patient-portal
        echo "Building Patient Portal Docker Image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/patient:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/patient:$IMAGE_TAG
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build & Push Physio Portal Docker Image
      if: contains(steps.affected.outputs.apps, 'doctor-portal')
      id: physio-image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        cd apps/doctor-portal
        echo "Building Physio Portal Docker Image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/physio:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/physio:$IMAGE_TAG
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT   

  deploy-dev:
    runs-on: ubuntu-latest
    name: "Deploy to Dev Environment 🚀"
    needs: build-and-push
    env:
      APPS: ${{ needs.build-and-push.outputs.affected_apps }}
      PATIENT_IMAGE_TAG: ${{ needs.build-and-push.outputs.patient_image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Sets the base and head SHAs for the nx affected commands in CI
      uses: nrwl/nx-set-shas@v4

    - name: Configure AWS Credentials
      if: contains(env.APPS, 'patient-portal') || contains(env.APPS, 'physio-portal')
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Update kubeconfig
      if: contains(env.APPS, 'patient-portal') || contains(env.APPS, 'physio-portal')
      run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

    - name: Deploy Patient Portal to Dev
      if: contains(env.APPS, 'patient-portal')
      run: |
        cd apps/patient-portal
        echo "Deploying to Dev..."
        sed -i "s|<IMAGE>|${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/patient|g" ./manifests/deployment.yaml
        sed -i "s/<VERSION>/${{ env.PATIENT_IMAGE_TAG }}/g" ./manifests/deployment.yaml
        kubectl apply -f ./manifests/deployment.yaml -n dev
        kubectl apply -f ./manifests/service.yaml -n dev
        echo "Patient Portal Deployment to Dev completed successfully! 🔥"

    # - name: Deploy Physio Portal to Dev
    #   if: contains(env.APPS, 'doctor-portal')
    #   run: |
    #     cd apps/doctor-portal
    #     echo "Deploying to Dev..."
    #     sed -i "s|<IMAGE>|${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}/physio|g" ./manifests/deployment.yaml
    #     sed -i "s/<VERSION>/${{ env.PATIENT_IMAGE_TAG }}/g" ./manifests/deployment.yaml
    #     kubectl apply -f ./manifests/deployment.yaml -n dev
    #     kubectl apply -f ./manifests/service.yaml -n dev
    #     echo "Physio Portal Deployment to Dev completed successfully! 🔥"

